// Mocks generated by Mockito 5.4.4 from annotations
// in to_do_list_app/test/task_mangement/helpers/test_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:hive/hive.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i11;
import 'package:to_do_list_app/features/task_management/data/data_source/complete_task_service.dart'
    as _i9;
import 'package:to_do_list_app/features/task_management/data/data_source/delete_task_service.dart'
    as _i10;
import 'package:to_do_list_app/features/task_management/data/data_source/post_task_service.dart'
    as _i8;
import 'package:to_do_list_app/features/task_management/data/model/task_model.dart'
    as _i7;
import 'package:to_do_list_app/features/task_management/domain/repository/complete_task_repository.dart'
    as _i4;
import 'package:to_do_list_app/features/task_management/domain/repository/delete_task_repository.dart'
    as _i5;
import 'package:to_do_list_app/features/task_management/domain/repository/post_task_repository.dart'
    as _i3;
import 'package:to_do_list_app/features/task_management/domain/usecase/complete_task_usecase.dart'
    as _i13;
import 'package:to_do_list_app/features/task_management/domain/usecase/delete_task_usecase.dart'
    as _i14;
import 'package:to_do_list_app/features/task_management/domain/usecase/post_task_usecase.dart'
    as _i12;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeBox_0<E> extends _i1.SmartFake implements _i2.Box<E> {
  _FakeBox_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePostTaskRepository_1 extends _i1.SmartFake
    implements _i3.PostTaskRepository {
  _FakePostTaskRepository_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCompleteTaskRepository_2 extends _i1.SmartFake
    implements _i4.CompleteTaskRepository {
  _FakeCompleteTaskRepository_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDeleteTaskRepository_3 extends _i1.SmartFake
    implements _i5.DeleteTaskRepository {
  _FakeDeleteTaskRepository_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [PostTaskRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockPostTaskRepository extends _i1.Mock
    implements _i3.PostTaskRepository {
  MockPostTaskRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<bool> postTask(_i7.TaskModel? task) => (super.noSuchMethod(
        Invocation.method(
          #postTask,
          [task],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);
}

/// A class which mocks [CompleteTaskRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCompleteTaskRepository extends _i1.Mock
    implements _i4.CompleteTaskRepository {
  MockCompleteTaskRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<bool> completeTask(int? taskId) => (super.noSuchMethod(
        Invocation.method(
          #completeTask,
          [taskId],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);
}

/// A class which mocks [DeleteTaskRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteTaskRepository extends _i1.Mock
    implements _i5.DeleteTaskRepository {
  MockDeleteTaskRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<bool> deleteTask(int? taskId) => (super.noSuchMethod(
        Invocation.method(
          #deleteTask,
          [taskId],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);
}

/// A class which mocks [PostTaskService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPostTaskService extends _i1.Mock implements _i8.PostTaskService {
  MockPostTaskService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Box<_i7.TaskModel> get tasksBox => (super.noSuchMethod(
        Invocation.getter(#tasksBox),
        returnValue: _FakeBox_0<_i7.TaskModel>(
          this,
          Invocation.getter(#tasksBox),
        ),
      ) as _i2.Box<_i7.TaskModel>);

  @override
  _i6.Future<bool> postTask(_i7.TaskModel? task) => (super.noSuchMethod(
        Invocation.method(
          #postTask,
          [task],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);
}

/// A class which mocks [CompleteTaskService].
///
/// See the documentation for Mockito's code generation for more information.
class MockCompleteTaskService extends _i1.Mock
    implements _i9.CompleteTaskService {
  MockCompleteTaskService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Box<_i7.TaskModel> get tasksBox => (super.noSuchMethod(
        Invocation.getter(#tasksBox),
        returnValue: _FakeBox_0<_i7.TaskModel>(
          this,
          Invocation.getter(#tasksBox),
        ),
      ) as _i2.Box<_i7.TaskModel>);

  @override
  _i6.Future<bool> completeTask(int? taskId) => (super.noSuchMethod(
        Invocation.method(
          #completeTask,
          [taskId],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);
}

/// A class which mocks [DeleteTaskService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteTaskService extends _i1.Mock implements _i10.DeleteTaskService {
  MockDeleteTaskService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Box<_i7.TaskModel> get tasksBox => (super.noSuchMethod(
        Invocation.getter(#tasksBox),
        returnValue: _FakeBox_0<_i7.TaskModel>(
          this,
          Invocation.getter(#tasksBox),
        ),
      ) as _i2.Box<_i7.TaskModel>);

  @override
  _i6.Future<bool> deleteTask(int? taskId) => (super.noSuchMethod(
        Invocation.method(
          #deleteTask,
          [taskId],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);
}

/// A class which mocks [Box].
///
/// See the documentation for Mockito's code generation for more information.
class MockBox<E> extends _i1.Mock implements _i2.Box<E> {
  MockBox() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Iterable<E> get values => (super.noSuchMethod(
        Invocation.getter(#values),
        returnValue: <E>[],
      ) as Iterable<E>);

  @override
  String get name => (super.noSuchMethod(
        Invocation.getter(#name),
        returnValue: _i11.dummyValue<String>(
          this,
          Invocation.getter(#name),
        ),
      ) as String);

  @override
  bool get isOpen => (super.noSuchMethod(
        Invocation.getter(#isOpen),
        returnValue: false,
      ) as bool);

  @override
  bool get lazy => (super.noSuchMethod(
        Invocation.getter(#lazy),
        returnValue: false,
      ) as bool);

  @override
  Iterable<dynamic> get keys => (super.noSuchMethod(
        Invocation.getter(#keys),
        returnValue: <dynamic>[],
      ) as Iterable<dynamic>);

  @override
  int get length => (super.noSuchMethod(
        Invocation.getter(#length),
        returnValue: 0,
      ) as int);

  @override
  bool get isEmpty => (super.noSuchMethod(
        Invocation.getter(#isEmpty),
        returnValue: false,
      ) as bool);

  @override
  bool get isNotEmpty => (super.noSuchMethod(
        Invocation.getter(#isNotEmpty),
        returnValue: false,
      ) as bool);

  @override
  Iterable<E> valuesBetween({
    dynamic startKey,
    dynamic endKey,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #valuesBetween,
          [],
          {
            #startKey: startKey,
            #endKey: endKey,
          },
        ),
        returnValue: <E>[],
      ) as Iterable<E>);

  @override
  E? getAt(int? index) => (super.noSuchMethod(Invocation.method(
        #getAt,
        [index],
      )) as E?);

  @override
  Map<dynamic, E> toMap() => (super.noSuchMethod(
        Invocation.method(
          #toMap,
          [],
        ),
        returnValue: <dynamic, E>{},
      ) as Map<dynamic, E>);

  @override
  dynamic keyAt(int? index) => super.noSuchMethod(Invocation.method(
        #keyAt,
        [index],
      ));

  @override
  _i6.Stream<_i2.BoxEvent> watch({dynamic key}) => (super.noSuchMethod(
        Invocation.method(
          #watch,
          [],
          {#key: key},
        ),
        returnValue: _i6.Stream<_i2.BoxEvent>.empty(),
      ) as _i6.Stream<_i2.BoxEvent>);

  @override
  bool containsKey(dynamic key) => (super.noSuchMethod(
        Invocation.method(
          #containsKey,
          [key],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i6.Future<void> put(
    dynamic key,
    E? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [
            key,
            value,
          ],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> putAt(
    int? index,
    E? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #putAt,
          [
            index,
            value,
          ],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> putAll(Map<dynamic, E>? entries) => (super.noSuchMethod(
        Invocation.method(
          #putAll,
          [entries],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<int> add(E? value) => (super.noSuchMethod(
        Invocation.method(
          #add,
          [value],
        ),
        returnValue: _i6.Future<int>.value(0),
      ) as _i6.Future<int>);

  @override
  _i6.Future<Iterable<int>> addAll(Iterable<E>? values) => (super.noSuchMethod(
        Invocation.method(
          #addAll,
          [values],
        ),
        returnValue: _i6.Future<Iterable<int>>.value(<int>[]),
      ) as _i6.Future<Iterable<int>>);

  @override
  _i6.Future<void> delete(dynamic key) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [key],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> deleteAt(int? index) => (super.noSuchMethod(
        Invocation.method(
          #deleteAt,
          [index],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> deleteAll(Iterable<dynamic>? keys) => (super.noSuchMethod(
        Invocation.method(
          #deleteAll,
          [keys],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> compact() => (super.noSuchMethod(
        Invocation.method(
          #compact,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<int> clear() => (super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValue: _i6.Future<int>.value(0),
      ) as _i6.Future<int>);

  @override
  _i6.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> deleteFromDisk() => (super.noSuchMethod(
        Invocation.method(
          #deleteFromDisk,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> flush() => (super.noSuchMethod(
        Invocation.method(
          #flush,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}

/// A class which mocks [PostTaskUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockPostTaskUsecase extends _i1.Mock implements _i12.PostTaskUsecase {
  MockPostTaskUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.PostTaskRepository get postTaskRepository => (super.noSuchMethod(
        Invocation.getter(#postTaskRepository),
        returnValue: _FakePostTaskRepository_1(
          this,
          Invocation.getter(#postTaskRepository),
        ),
      ) as _i3.PostTaskRepository);

  @override
  _i6.Future<bool> postTask(_i7.TaskModel? task) => (super.noSuchMethod(
        Invocation.method(
          #postTask,
          [task],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);
}

/// A class which mocks [CompleteTaskUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCompleteTaskUsecase extends _i1.Mock
    implements _i13.CompleteTaskUsecase {
  MockCompleteTaskUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.CompleteTaskRepository get completeTaskRepository => (super.noSuchMethod(
        Invocation.getter(#completeTaskRepository),
        returnValue: _FakeCompleteTaskRepository_2(
          this,
          Invocation.getter(#completeTaskRepository),
        ),
      ) as _i4.CompleteTaskRepository);

  @override
  _i6.Future<bool> completeTask(int? taskId) => (super.noSuchMethod(
        Invocation.method(
          #completeTask,
          [taskId],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);
}

/// A class which mocks [DeleteTaskUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteTaskUsecase extends _i1.Mock implements _i14.DeleteTaskUsecase {
  MockDeleteTaskUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.DeleteTaskRepository get deleteTaskRepository => (super.noSuchMethod(
        Invocation.getter(#deleteTaskRepository),
        returnValue: _FakeDeleteTaskRepository_3(
          this,
          Invocation.getter(#deleteTaskRepository),
        ),
      ) as _i5.DeleteTaskRepository);

  @override
  _i6.Future<bool> deleteTask(int? taskId) => (super.noSuchMethod(
        Invocation.method(
          #deleteTask,
          [taskId],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);
}
